# Multi-stage Dockerfile for JobTrak API Service
FROM python:3.10-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    unzip \
    wget \
    git \
    build-essential \
    redis-tools \
    postgresql-client \
    netcat-openbsd \
    procps \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Create necessary directories with proper permissions
RUN mkdir -p /app/database /app/output /app/logs /app/tmp \
    && chown -R appuser:appuser /app \
    && chmod -R 755 /app \
    && chmod -R 777 /app/logs /app/output /app/tmp

# Copy source code
COPY --chown=appuser:appuser . .

# Create health check script
COPY --chown=appuser:appuser --chmod=755 <<'EOF' /usr/local/bin/healthcheck.sh
#!/bin/bash
set -e

# Function to check service health
check_service() {
    local service_name="$1"
    local check_command="$2"
    local timeout="${3:-30}"
    local counter=0

    echo "Checking $service_name..."

    while [ $counter -lt $timeout ]; do
        if eval "$check_command" >/dev/null 2>&1; then
            echo "✓ $service_name: OK"
            return 0
        fi
        counter=$((counter + 1))
        sleep 1
    done

    echo "✗ $service_name: FAILED (timeout after ${timeout}s)"
    return 1
}

# Check Redis connectivity
check_service "Redis" "redis-cli -h \${REDIS_HOST:-redis} -p \${REDIS_PORT:-6379} ping" 10

# Check PostgreSQL connectivity
check_service "PostgreSQL" "pg_isready -h \${POSTGRES_HOST:-postgres} -p \${POSTGRES_PORT:-5432} -U \${POSTGRES_USER:-jobtrak_user} -d \${POSTGRES_DB:-jobtrak}" 10

# Check FastAPI application
check_service "FastAPI" "curl -f http://localhost:8000/health" 5

echo "All health checks passed!"
exit 0
EOF

# Create startup script
COPY --chown=appuser:appuser --chmod=755 <<'EOF' /usr/local/bin/start.sh
#!/bin/bash
set -e

echo "🚀 Starting JobTrak API Service"
echo "==============================="

# Function to check service availability
check_service() {
    local service_name="$1"
    local check_command="$2"
    local max_attempts="${3:-30}"
    local attempt=0

    echo "⏳ Waiting for $service_name..."

    while [ $attempt -lt $max_attempts ]; do
        if eval "$check_command" >/dev/null 2>&1; then
            echo "✅ $service_name is ready"
            return 0
        fi
        attempt=$((attempt + 1))
        echo "   Attempt $attempt/$max_attempts..."
        sleep 2
    done

    echo "❌ $service_name failed to become ready after $max_attempts attempts"
    return 1
}

# Check if we're in debug mode
if [ "${API_DEBUG:-0}" = "1" ]; then
    echo "🐛 Debug mode enabled"
    echo "Environment variables:"
    env | grep -E "(PYTHONPATH|DATABASE_URL|REDIS_URL|POSTGRES_|REDIS_)" | sort
    echo ""
fi

# Wait for PostgreSQL
if ! check_service "PostgreSQL" "pg_isready -h \${POSTGRES_HOST:-postgres} -p \${POSTGRES_PORT:-5432} -U \${POSTGRES_USER:-jobtrak_user} -d \${POSTGRES_DB:-jobtrak}" 60; then
    echo "❌ PostgreSQL is not available. Exiting."
    exit 1
fi

# Wait for Redis
if ! check_service "Redis" "redis-cli -h \${REDIS_HOST:-redis} -p \${REDIS_PORT:-6379} ping" 30; then
    echo "❌ Redis is not available. Exiting."
    exit 1
fi

# Test database connectivity with Python
echo "🔄 Testing database connectivity with Python..."
python3 -c "
import os
import sys
try:
    import asyncpg
    print('✅ asyncpg module available')
except ImportError as e:
    print(f'❌ asyncpg import failed: {e}')
    print('⚠️ Installing asyncpg...')
    import subprocess
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'asyncpg'])
    import asyncpg
    print('✅ asyncpg installed and imported')

# Test connection
import asyncio
async def test_db():
    try:
        conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
        result = await conn.fetchval('SELECT 1')
        await conn.close()
        print('✅ Database connection test passed')
        return True
    except Exception as e:
        print(f'❌ Database connection test failed: {e}')
        return False

if not asyncio.run(test_db()):
    sys.exit(1)
" || {
    echo "❌ Database connectivity test failed"
    exit 1
}

# Run database migrations if needed
if [ -f "/app/migrations/run_migrations.py" ]; then
    echo "🔄 Running database migrations..."
    python /app/migrations/run_migrations.py || echo "⚠️ Migration warnings (continuing...)"
fi

# Set up environment
export PYTHONPATH=/app
cd /app

# Create a simple health endpoint if main.py doesn't exist
if [ ! -f "/app/main.py" ]; then
    echo "⚠️ main.py not found. Creating a simple health check server..."
    cat > /app/main.py << 'PYEOF'
from fastapi import FastAPI
import uvicorn
import os

app = FastAPI(title="JobTrak API", version="1.0.0")

@app.get("/")
async def root():
    return {"message": "JobTrak API is running", "status": "healthy"}

@app.get("/health")
async def health():
    return {
        "status": "healthy",
        "service": "jobtrak-api",
        "version": "1.0.0",
        "environment": {
            "database_url": bool(os.getenv("DATABASE_URL")),
            "redis_url": bool(os.getenv("REDIS_URL")),
            "debug_mode": os.getenv("API_DEBUG", "0") == "1"
        }
    }

@app.get("/metrics")
async def metrics():
    return {"metrics": "placeholder"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
PYEOF
fi

# Start the application
echo "🌟 Starting FastAPI application..."
if [ "${API_DEBUG:-0}" = "1" ]; then
    echo "🐛 Debug mode enabled - starting with reload"
    exec python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
else
    exec python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 --log-level info
fi
EOF

# Create a simple migration runner (placeholder)
RUN mkdir -p /app/migrations
COPY --chown=appuser:appuser <<'EOF' /app/migrations/run_migrations.py
#!/usr/bin/env python3
"""
Simple migration runner for JobTrak
This is a placeholder - replace with your actual migration logic
"""
import os
import sys
import asyncio

# Add the app directory to Python path
sys.path.insert(0, '/app')

try:
    import asyncpg
    print("✅ asyncpg imported successfully")
except ImportError as e:
    print(f"❌ Failed to import asyncpg: {e}")
    print("⚠️ Continuing without migration check...")
    sys.exit(0)

async def run_migrations():
    """Run database migrations"""
    try:
        # Database connection
        db_url = os.getenv('DATABASE_URL', 'postgresql://jobtrak_user:jobtrak_secure_password_2024@postgres:5432/jobtrak')

        print("🔄 Connecting to database...")
        conn = await asyncpg.connect(db_url)

        # Simple connection test
        result = await conn.fetchval("SELECT 1")
        if result == 1:
            print("✅ Database connection successful")

        await conn.close()
        print("✅ Migration check completed")

    except Exception as e:
        print(f"⚠️ Migration check failed: {e}")
        print("⚠️ This is normal if the database is still starting up")
        # Don't fail the startup for migration issues
        return

if __name__ == "__main__":
    asyncio.run(run_migrations())
EOF

# Create a simple health check script
COPY --chown=appuser:appuser <<'EOF' /app/health_check.py
#!/usr/bin/env python3
"""
Simple health check script for JobTrak API
"""
import sys
import os
import requests
import time

def check_health():
    """Check if the API is healthy"""
    try:
        response = requests.get('http://localhost:8000/health', timeout=5)
        if response.status_code == 200:
            print("✅ API is healthy")
            return True
        else:
            print(f"❌ API returned status code: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ API health check failed: {e}")
        return False

def wait_for_health(max_attempts=30):
    """Wait for API to become healthy"""
    for attempt in range(max_attempts):
        if check_health():
            return True
        print(f"⏳ Attempt {attempt + 1}/{max_attempts} - waiting 2s...")
        time.sleep(2)
    return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--wait":
        success = wait_for_health()
        sys.exit(0 if success else 1)
    else:
        success = check_health()
        sys.exit(0 if success else 1)
EOF

# Set proper ownership and permissions
RUN chown -R appuser:appuser /app \
    && chmod +x /usr/local/bin/healthcheck.sh \
    && chmod +x /usr/local/bin/start.sh \
    && chmod +x /app/migrations/run_migrations.py \
    && chmod +x /app/health_check.py \
    && chmod -R 777 /app/logs /app/output /app/tmp

# Switch to non-root user
USER appuser

# Set default environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    SELENIUM_REMOTE_URL=http://selenium-chrome:4444/wd/hub \
    REDIS_URL=redis://redis:6379/0 \
    REDIS_HOST=redis \
    REDIS_PORT=6379 \
    REDIS_DB=0 \
    CACHE_TTL=3600 \
    POSTGRES_HOST=postgres \
    POSTGRES_PORT=5432 \
    POSTGRES_DB=jobtrak \
    POSTGRES_USER=jobtrak_user \
    DATABASE_URL=postgresql://jobtrak_user:jobtrak_secure_password_2024@postgres:5432/jobtrak

# Add comprehensive health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Expose ports
EXPOSE 8000 5678

# Use the startup script
CMD ["/usr/local/bin/start.sh"]